[	
	{
		"question": "  JavaScript can be used for storing the form's contents to a database file on the server  ",
		"answer": [
			{
				"content": "A. False",
				"isCorrect": true
			},
			{
				"content": "B. True",
				"isCorrect": false
			}
		],
		"detail": "JavaScript is client-side language, so it cannot be used for interacting with server directly"
	},
	{
		"question": "  To insert a JavaScript into an HTML page, which tag is used  ",
		"answer": [
			{
				"content": "A. < script=’java’>",
				"isCorrect": false
			},
			{
				"content": "B. < javascript>",
				"isCorrect": false
			},
			{
				"content": "C. < script>",
				"isCorrect": true
			},
			{
				"content": "D. < js>",
				"isCorrect": false
			}
		],
		"detail": ""
	},	
	{
		"question": "  Which of the below is used in Javascript to insert special characters  ",
		"answer": [
			{
				"content": "A. &",
				"isCorrect": false
			},
			{
				"content": "B. \\",
				"isCorrect": true
			},
			{
				"content": "C. -",
				"isCorrect": false
			},
			{
				"content": "D. %",
				"isCorrect": false
			}
		],
		"detail": ""
	},		
	{
		"question": "  JavaScript ignores extra spaces  ",
		"answer": [
			{
				"content": "A. True",
				"isCorrect": false
			},
			{
				"content": "B. False",
				"isCorrect": true
			}
		],
		"detail": ""
	},
	{
		"question": "  Which is the correct way to write a JavaScript array  ",
		"answer": [
			{
				"content": "A. var txt = new Array(1:\"arr\",2:\"kim\",3:\"jim\")",
				"isCorrect": false
			},
			{
				"content": "B. var txt = new Array:1=(\" arr \")2=(\"kim\")3=(\"jim\")",
				"isCorrect": false
			},
			{
				"content": "C. var txt = new Array(\"arr \",\"kim\",\"jim\")",
				"isCorrect": true
			},
			{
				"content": "D. var txt = new Array=\" arr \",\"kim\",\"jim\"",
				"isCorrect": false
			}
		],
		"detail": ""
	},
	{
		"question": "Moduling/Visualing a programming object in JavaScript",
		"answer": [
			{
				"content": "Give it a shot",
				"isCorrect": true
			}
		],
		"detail": "https://repl.it/repls/JollyCircularDevice"
	},	
	{
		"question": "  Which of the following is correct to write “Hello World” on the web page  ",
		"answer": [
			{
				"content": "A. System.out.println(“Hello World”)",
				"isCorrect": false
			},
			{
				"content": "B. print(“Hello World”)",
				"isCorrect": false
			},
			{
				"content": "C. document.write(“Hello World”)",
				"isCorrect": true
			},
			{
				"content": "D. response.write(“Hello World”)",
				"isCorrect": false
			}
		],
		"detail": ""
	},			
	{
		"question": "JavaScript is (considered) an object oriented language  ",
		"answer": [
			{
				"content": "A. False",
				"isCorrect": false
			},
			{
				"content": "B. True",
				"isCorrect": true
			}
		],
		"detail": "It depends. JavaScript is an object-based language. The developer can choose to use constructs that allow him to create Object Oriented code or not "
	},
	{
		"question": "Which of the following is not a valid JavaScript variable name  ",
		"answer": [
			{
				"content": "A. 2java",
				"isCorrect": true
			},
			{
				"content": "B. _java_and_ java _names",
				"isCorrect": false
			},
			{
				"content": "C. javaandjava",
				"isCorrect": false
			},
			{
				"content": "D. None of the above",
				"isCorrect": false
			}
		],
		"detail": "https://www.dummies.com/web-design-development/javascript/naming-javascript-variables/"
	},
	{
		"question": "Which of the ways below is incorrect of instantiating a date  ",
		"answer": [
			{
				"content": "A. new Date(dateString)",
				"isCorrect": false
			},
			{
				"content": "B. new Date()",
				"isCorrect": false
			},
			{
				"content": "C. new Date(seconds)",
				"isCorrect": true
			},
			{
				"content": "D. new Date(year, month, day, hours, minutes, seconds, milliseconds)",
				"isCorrect": false
			}
		],
		"detail": ""
	},	
	{
		"question": "       ___________ JavaScript is also called client-side JavaScript.  ",
		"answer": [
			{
				"content": "A. Microsoft",
				"isCorrect": false
			},
			{
				"content": "B. Navigator",
				"isCorrect": true
			},
			{
				"content": "C. LiveWire",
				"isCorrect": false
			},
			{
				"content": "D. Native",
				"isCorrect": false
			}
		],
		"detail": "https://www.w3schools.com/jsref/obj_navigator.asp"
	},
	{
		"question": "What is the difference between array.map() and array.forEach() in JavaScript",
		"answer": [
			{
				"content": "They are similar to each other",
				"isCorrect": false
			},
			{
				"content": ".forEach() return new array, while .map() does not",
				"isCorrect": false
			},
			{
				"content": ".map() return an array of elements in ASCII code",
				"isCorrect": false
			},
			{
				"content": "None of the above",
				"isCorrect": true
			}
		],
		"detail": "https://repl.it/repls/WildUnfinishedSandboxes"
	},
	{
		"question": "       What language defines the behavior of a web page  ",
		"answer": [
			{
				"content": "A. HTML",
				"isCorrect": false
			},
			{
				"content": "B. CSS",
				"isCorrect": false
			},
			{
				"content": "C. XML",
				"isCorrect": false
			},
			{
				"content": "D. JavaScript",
				"isCorrect": true
			}
		],
		"detail": ""
	},
	{
		"question": "  File is a server-side JavaScript object  ",
		"answer": [
			{
				"content": "A. True",
				"isCorrect": true
			},
			{
				"content": "B. False",
				"isCorrect": false
			}
		],
		"detail": ""
	},
	{
		"question": "  What is the alternate name for Java script  ",
		"answer": [
			{
				"content": "A. LimeScript",
				"isCorrect": false
			},
			{
				"content": "B. Both a and d",
				"isCorrect": false
			},
			{
				"content": "C. ECMScript",
				"isCorrect": false
			},
			{
				"content": "D. ECMAScript",
				"isCorrect": true
			}
		],
		"detail": "https://www.w3schools.com/js/js_versions.asp"
	},
	{
		"question": "Is it possible to declare a variable in Java Script along its type? How we do it  ",
		"answer": [
			{
				"content": "A. Yes",
				"isCorrect": true
			},
			{
				"content": "B. No",
				"isCorrect": false
			}
		],
		"detail": "https://repl.it/repls/SparseZigzagRepository"
	},
	{
		"question": "       Which of the following method is used to evaluate a string of Java Script code in the context of the specified object  ",
		"answer": [
			{
				"content": "A. Eval",
				"isCorrect": true
			},
			{
				"content": "B. ParseDoule",
				"isCorrect": false
			},
			{
				"content": "C. ParseObject",
				"isCorrect": false
			},
			{
				"content": "D. Efloat",
				"isCorrect": false
			}
		],
		"detail": "https://www.w3schools.com/jsref/jsref_eval.asp"
	},
	{
		"question": "What is Hoisting in JavaScript  ",
		"answer": [
			{
				"content": "A. Variables can be declared in the top of its scope.",
				"isCorrect": true
			},
			{
				"content": "B. Execute code line by line",
				"isCorrect": false
			},
			{
				"content": "C. Wait for a process to be completed to continue executing another process",
				"isCorrect": false
			},
			{
				"content": "D. Find the data type of a JavaScript variable.",
				"isCorrect": false
			}
		],
		"detail": "https://repl.it/repls/UltimatePrevailingTranslation"
	},	
	{
		"question": "How to append a value to an array of Java Script  ",
		"answer": [
			{
				"content": "A. arr[arr.length] = value",
				"isCorrect": true
			},
			{
				"content": "B. arr[arr.length+1] = new Arrays()",
				"isCorrect": false
			},
			{
				"content": "C. arr[arr.length-1] = value",
				"isCorrect": false
			},
			{
				"content": "D. arr[arr.length*1] = value",
				"isCorrect": false
			}
		],
		"detail": "https://repl.it/repls/PlumThinDecimals"
	},		
	{
		"question": "In JavaScript, compare how == differs from ===  ",
		"answer": [
			{
				"content": "A.They are similar",
				"isCorrect": false
			},
			{
				"content": "B.== is used for conditional statements, === is used for variables assignment",
				"isCorrect": false
			},
			{
				"content": "C.== compare value, while === compare the type",
				"isCorrect": false
			},
			{
				"content": "D.== compare value, === compare both value and type ",
				"isCorrect": true
			}
		],
		"detail": "https://www.w3schools.com/js/js_comparisons.asp"
	},		
	{
		"question": "Compare the different between var, let and const declaration in JavaScript",
		"answer": [
			{
				"content": "A.They are all similar",
				"isCorrect": false
			},
			{
				"content": "B.const used to declare function and object, var and let used to declare variable",
				"isCorrect": false
			},			
			{
				"content": "C.const is only used for declaring CONSTANT variables.",
				"isCorrect": false
			},
			{
				"content": "D.None of the above",
				"isCorrect": true
			}
		],
		"detail": "https://repl.it/repls/GrumpyBothPrintablecharacter"
	},		
	{
		"question": "What is the output:<br/>function sayHi() {<br/>&nbsp;&nbsp;console.log(name);<br/>&nbsp;&nbsp;console.log(age);<br/>&nbsp;&nbsp;var name = 'Lydia';<br/>&nbsp;&nbsp;let age = 21;<br/>}<br/>sayHi(); ",
		"answer": [
			{
				"content": "A.Lydia và undefined",
				"isCorrect": false
			},
			{
				"content": "B.Lydia và ReferenceError",
				"isCorrect": false
			},			
			{
				"content": "C.ReferenceError và 21",
				"isCorrect": false
			},
			{
				"content": "D.undefined và ReferenceError",
				"isCorrect": true
			}
		],
		"detail": "Trong hàm chúng ta đã khai báo biến name với var. Điều đó có nghĩa là biến này sẽ được hoisted (một vùng nhớ sẽ được set up khi biến được khởi tạo) với giá trị mặc định là undefined, cho tới khi chúng ta thực sự định nghĩa biến đó. Trong hàm này, chúng ta chưa hề định nghĩa biến name tại dòng mà ta log ra, vậy nên giá trị mặc định của nó vẫn là undefined. Các biến được khai báo với keyword let (và const) cũng được hoisted nhưng không giống như var, chúng không được khởi tạo. Chúng ta sẽ không thể truy cập chúng cho tới khi chúng ta khai báo (khởi tạo) chúng. Người ta gọi đó là 'temporal dead zone'. Khi ta truy cập đến một giá trị trước khi chúng được khai báo, JavaScript sẽ throws một ReferenceError."
	},		
	{
		"question": "What is the output:for (var i = 0; i < 3; i++) {<br/>&nbsp;setTimeout(() => console.log(i), 1);<br/>}<br/>for (let i = 0; i < 3; i++) {<br/>&nbsp;setTimeout(() => console.log(i), 1);<br/>}<br/>",
		"answer": [
			{
				"content": "A.0 1 2 and 0 1 2",
				"isCorrect": false
			},
			{
				"content": "B.0 1 2 and 3 3 3",
				"isCorrect": false
			},			
			{
				"content": "C.3 3 3 and 0 1 2",
				"isCorrect": true
			}
		],
		"detail": "Bởi vì event queue trong JavaScript, hàm setTimeout callback sẽ được gọi sau khi vòng lặp được thực hiện. Bời vì biến i trong vòng lặp đầu tiên được khai báo với từ khóa var, nên nó sẽ là một biến global. Trong suốt vòng lặp, mỗi lần chúng ta tăng giá trị của i lên 1, sử dụng phép toán ++. Cho tới khi callback setTimeout được gọi, giá trị của i đã trở thành 3 rồi.Trong vòng lặp thứ 2, biến i được khai báo với từ khóa let, có nghĩa nó là một biến block-scoped (block là những gì được viết bên trong cặp ngoặc { }). Tại mỗi vòng lặp, i sẽ là một biến mới có một giá trị mới, và giá trị đó có scope là bên trong vòng lặp mà thôi."
	},			
	{
		"question": "What is the output: <br/>const shape = {<br/>&nbsp;radius: 10,<br/>&nbsp;diameter() {<br/>&nbsp;&nbsp;&nbsp;return this.radius * 2;<br/>&nbsp;},<br/>&nbsp;perimeter: () => 2 * Math.PI * this.radius<br/>};<br/>shape.diameter();<br/>shape.perimeter();",
		"answer": [
			{
				"content": "A.20 and 62.83185307179586",
				"isCorrect": false
			},
			{
				"content": "B.20 and NaN",
				"isCorrect": true
			},			
			{
				"content": "C.20 and 63",
				"isCorrect": false
			},			
			{
				"content": "D.NaN and 63",
				"isCorrect": false
			}
		],
		"detail": "Chú ý rằng giá trị diameter là một hàm thông thường, còn perimeter là một arrow function. Không giống như hàm thông thường, với arrow function, biến this sẽ trỏ tới surrounding scope! Có nghĩa là khi chúng ta gọi perimeter, nó sẽ không được gọi bởi shape object, mà nó được gọi bởi object nào đó tại surrounding scope (ví dụ window chẳng hạn).Khi không có giá trị radius tại object đó, nó sẽ trả về undefined."
	},			
	{
		"question": "How Does a Function Expression Differ from a Function Declaration",
		"answer": [
			{
				"content": "A. There is no difference.",
				"isCorrect": false
			},
			{
				"content": "B. Function expression cannot be passed any parameter or argument.",
				"isCorrect": false
			},			
			{
				"content": "C. Function expression and function declaration are another types of IIFE (Intermediate Invoked Function Expression).",
				"isCorrect": false
			},			
			{
				"content": "D. All of the above.",
				"isCorrect": false
			},			
			{
				"content": "E. None of the above.",
				"isCorrect": true
			}
		],
		"detail": "The key difference is that function declarations are hoisted, while function expressions are not. That means function declarations are moved to the top of their scope by the JavaScript interpreter, and so you can define a function declaration and call it anywhere in your code."
	}		
]